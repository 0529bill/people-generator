{"version":3,"sources":["Layout.js","Spinner.js","App.js","index.js"],"names":["Layout","props","className","style","mode","filter","backgroundColor","borderStyle","paddingTop","paddingBottom","data","gender","name","first","last","location","city","alt","src","picture","large","Spinner","textAlign","marginTop","aria-hidden","App","useState","datas","setdatas","loading","setLoading","darkmode","setDarkmode","refresh","setRefresh","buttonStyle","color","useEffect","setTimeout","axios","get","then","response","results","height","Container","width","Button","onClick","prev","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAmCeA,MA/Bf,SAAgBC,GAiBd,OACE,sBAAKC,UAAU,SAASC,MAAOF,EAAMG,KATtB,CACfC,OAAQ,gBACRC,gBAAiB,QACjBC,YAAa,QACbC,WAAY,MACZC,cAAe,OAbD,CACdJ,OAAQ,gBACRC,gBAAiB,WACjBC,YAAa,QACbC,WAAY,MACZC,cAAe,OAYf,UACE,2CAAcR,EAAMS,KAAKC,UACzB,yCAAYV,EAAMS,KAAKE,KAAKC,MAAQ,IAAMZ,EAAMS,KAAKE,KAAKE,QAC1D,6CAAgBb,EAAMS,KAAKK,SAASC,QACpC,qBACEd,UAAU,cACVe,IAAI,YACJC,IAAKjB,EAAMS,KAAKS,QAAQC,Y,uBCVjBC,MAff,WACE,OACE,qCACE,qBACElB,MAAO,CAAEmB,UAAW,SAAUC,UAAW,QACzCrB,UAAU,UAFZ,SAIE,mBAAGA,UAAU,gBAAgBsB,cAAY,WAE3C,qBAAKtB,UAAU,OAAf,SACE,mF,gBCkEOuB,MA1Ef,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACRC,EADQ,KACDC,EADC,OAEeF,oBAAS,GAFxB,mBAERG,EAFQ,KAECC,EAFD,OAGiBJ,mBAAS,MAH1B,mBAGRK,EAHQ,KAGEC,EAHF,OAIeN,oBAAS,GAJxB,mBAIRO,EAJQ,KAICC,EAJD,KASTC,EAAc,CAChBC,MAAO,QACP9B,gBAAiB,SA0BnB,OAXA+B,qBAAU,WACKC,YACX,kBACEC,IAAMC,IAAI,8BAA8BC,MAAK,SAAUC,GACrDd,EAASc,EAAShC,KAAKiC,QAAQ,IAC/Bb,GAAW,QAEf,OAED,CAACG,IAGF,qBAAK/B,UAAU,OAAOC,MAAO4B,EAzBf,CACdzB,gBAAiB,WACjBsC,OAAQ,SAEO,CACftC,gBAAiB,QACjBsC,OAAQ,SAmBR,SACE,eAACC,EAAA,EAAD,CAAW1C,MAAO,CAAE2C,MAAO,QAAStC,WAAY,OAAhD,UACE,qBAAKN,UAAU,MAAMC,MAAO,CAAEmB,UAAW,UAAzC,SACGO,EACC,cAAC,EAAD,CAAQnB,KAAMiB,EAAOvB,KAAM2B,IAE3B,cAAC,EAAD,CAAS3B,KAAM2B,MAGnB,8BACGF,EACC,cAACkB,EAAA,EAAD,CACEC,QAAS,WA3CnBhB,GAAY,SAACiB,GAAD,OAAWA,MA4Cb/C,UAAU,OACVC,MAAO4B,EAAWI,EAAc,KAHlC,uBAOE,OAEN,8BACGN,EACC,cAACkB,EAAA,EAAD,CACEC,QAAS,kBAvCnBlB,GAAW,QACXI,GAAW,SAACe,GAAD,OAAWA,MAuCZ/C,UAAU,OACVC,MAAO4B,EAAWI,EAAc,KAHlC,qBAOE,a,MClEde,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.449bc754.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Layout.css';\r\n\r\nfunction Layout(props) {\r\n  let darkStyle = {\r\n    filter: 'contrast(0.7)',\r\n    backgroundColor: 'cornsilk',\r\n    borderStyle: 'solid',\r\n    paddingTop: '5vh',\r\n    paddingBottom: '5vh',\r\n  };\r\n\r\n  let lightStyle = {\r\n    filter: 'contrast(0.7)',\r\n    backgroundColor: 'white',\r\n    borderStyle: 'solid',\r\n    paddingTop: '5vh',\r\n    paddingBottom: '5vh',\r\n  };\r\n\r\n  return (\r\n    <div className=\"layout\" style={props.mode ? lightStyle : darkStyle}>\r\n      <div>Gender: {props.data.gender}</div>\r\n      <div>Name: {props.data.name.first + ' ' + props.data.name.last}</div>\r\n      <div>location: {props.data.location.city}</div>\r\n      <img\r\n        className=\"layout__img\"\r\n        alt=\"peopleImg\"\r\n        src={props.data.picture.large}\r\n      ></img>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Layout;\r\n","import React from 'react';\r\n\r\nimport './Spinner.css';\r\n\r\nfunction Spinner() {\r\n  return (\r\n    <>\r\n      <div\r\n        style={{ textAlign: 'center', marginTop: '30vh' }}\r\n        className=\"spinner\"\r\n      >\r\n        <i className=\"fa fa-spinner\" aria-hidden=\"true\"></i>\r\n      </div>\r\n      <div className=\"mt-3\">\r\n        <p>Refresh the window if it's spinning too long</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nexport default Spinner;\r\n","import React, { useEffect, useState } from 'react';\nimport Layout from './Layout';\nimport axios from 'axios';\nimport Spinner from './Spinner';\nimport { Container, Button } from 'react-bootstrap';\n\nfunction App() {\n  let [datas, setdatas] = useState('');\n  let [loading, setLoading] = useState(false);\n  let [darkmode, setDarkmode] = useState(null);\n  let [refresh, setRefresh] = useState(false);\n\n  let handleDarkmode = () => {\n    setDarkmode((prev) => !prev);\n  };\n  let buttonStyle = {\n    color: 'black',\n    backgroundColor: 'white',\n  };\n  let darkStyle = {\n    backgroundColor: 'darkgray',\n    height: '100vh',\n  };\n  let lightStyle = {\n    backgroundColor: 'white',\n    height: '100vh',\n  };\n  let handleRefresh = () => {\n    setLoading(false);\n    setRefresh((prev) => !prev);\n  };\n\n  useEffect(() => {\n    const data = setTimeout(\n      () =>\n        axios.get('https://randomuser.me/api/').then(function (response) {\n          setdatas(response.data.results[0]);\n          setLoading(true);\n        }),\n      1000\n    );\n  }, [refresh]);\n\n  return (\n    <div className=\"main\" style={darkmode ? darkStyle : lightStyle}>\n      <Container style={{ width: '300px', paddingTop: '5vh' }}>\n        <div className=\"App\" style={{ textAlign: 'center' }}>\n          {loading ? (\n            <Layout data={datas} mode={darkmode} />\n          ) : (\n            <Spinner mode={darkmode} />\n          )}\n        </div>\n        <div>\n          {loading ? (\n            <Button\n              onClick={() => handleDarkmode()}\n              className=\"mt-5\"\n              style={darkmode ? buttonStyle : null}\n            >\n              Dark Mode\n            </Button>\n          ) : null}\n        </div>\n        <div>\n          {loading ? (\n            <Button\n              onClick={() => handleRefresh()}\n              className=\"mt-3\"\n              style={darkmode ? buttonStyle : null}\n            >\n              refresh\n            </Button>\n          ) : null}\n        </div>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}